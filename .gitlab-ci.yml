image: "ubuntu:latest"

stages:
  - fetch
  - build
  - package
  - upload
  - release

variables:
  PACKAGE_REGISTRY_URL: "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/packages/generic/fim/continuous"
  PROJECT_URL: "https://gitlab.com/api/v4/projects/43000137"

fetch-e2fsprogs:
  image: "ubuntu:focal"
  stage: fetch
  when: manual
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt update && apt -y upgrade
    - apt install -y wget
    - echo JOB_ID_FETCH_E2FSPROGS=$CI_JOB_ID > build.env
  script:
    - |
      mkdir -p bin
      wget -O ./bin/fuse2fs   "https://github.com/ruanformigoni/e2fsprogs/releases/download/e58f946/fuse2fs"
      wget -O ./bin/mke2fs    "https://github.com/ruanformigoni/e2fsprogs/releases/download/e58f946/mke2fs"
      wget -O ./bin/e2fsck    "https://github.com/ruanformigoni/e2fsprogs/releases/download/e58f946/e2fsck"
      wget -O ./bin/resize2fs "https://github.com/ruanformigoni/e2fsprogs/releases/download/e58f946/resize2fs"
  artifacts:
    paths:
      - ./bin
    reports:
      dotenv: build.env

fetch-proot:
  image: "ubuntu:focal"
  stage: fetch
  when: manual
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt update && apt -y upgrade
    - apt install -y wget
    - echo JOB_ID_FETCH_PROOT=$CI_JOB_ID > build.env
  script:
    - |
      mkdir -p ./bin
      wget -O ./bin/proot "https://github.com/ruanformigoni/proot/releases/download/5a4be11/proot"
  artifacts:
    paths:
      - ./bin
    reports:
      dotenv: build.env

fetch-bwrap:
  image: "ubuntu:focal"
  stage: fetch
  when: manual
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt update && apt -y upgrade
    - apt install -y wget
    - echo JOB_ID_FETCH_BWRAP=$CI_JOB_ID > build.env
  script:
    - |
      mkdir -p ./bin
      wget -O ./bin/bwrap "https://github.com/ruanformigoni/bubblewrap-musl-static/releases/download/559a725/bwrap"
  artifacts:
    paths:
      - ./bin
    reports:
      dotenv: build.env

fetch-dwarfs:
  image: "ubuntu:jammy"
  stage: fetch
  when: manual
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt update && apt -y upgrade
    - apt install -y wget xz-utils tar
    - echo JOB_ID_BUILD_DWARFS=$CI_JOB_ID > build.env
  script:
    - |
      mkdir -p ./dwarfs
      wget -Odwarfs.tar.xz https://github.com/mhx/dwarfs/releases/download/v0.6.2/dwarfs-0.6.2-Linux.tar.xz
      tar xf dwarfs.tar.xz --strip-components=1 -Cdwarfs
      mkdir -p ./bin
      mv ./dwarfs/bin/mkdwarfs      ./bin
      mv ./dwarfs/bin/dwarfsextract ./bin
      mv ./dwarfs/sbin/dwarfs2      ./bin/dwarfs
  artifacts:
    paths:
      - ./bin
    reports:
      dotenv: build.env

fetch-bash:
  image: "ubuntu:jammy"
  stage: fetch
  when: manual
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt update && apt -y upgrade
    - apt install -y wget xz-utils tar
    - echo JOB_ID_BUILD_BASH=$CI_JOB_ID > build.env
  script:
    - |
      mkdir -p bin
      wget -O ./bin/bash "https://github.com/ruanformigoni/bash-static/releases/download/5355251/bash-linux-x86_64"
  artifacts:
    paths:
      - ./bin
    reports:
      dotenv: build.env


build-elf:
  image: docker:latest
  stage: build
  when: manual
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    IMAGE_NAME: alpine:fim

  before_script:
    - echo GE_JOB_ID=$CI_JOB_ID >> build.env

  script:
    - mkdir -p bin
    - docker build . --build-arg FIM_DIST=ARCH -t $CI_REGISTRY/$IMAGE_NAME -f docker/Dockerfile.elf
    - docker run --rm -v $(pwd):/workdir $CI_REGISTRY/$IMAGE_NAME cp /fim/dist/main /workdir/bin/elf-arch
    - docker build . --build-arg FIM_DIST=ALPINE -t $CI_REGISTRY/$IMAGE_NAME -f docker/Dockerfile.elf
    - docker run --rm -v $(pwd):/workdir $CI_REGISTRY/$IMAGE_NAME cp /fim/dist/main /workdir/bin/elf-alpine
    - docker build . --build-arg FIM_DIST=UBUNTU -t $CI_REGISTRY/$IMAGE_NAME -f docker/Dockerfile.elf
    - docker run --rm -v $(pwd):/workdir $CI_REGISTRY/$IMAGE_NAME cp /fim/dist/main /workdir/bin/elf-ubuntu

  artifacts:
    paths:
      - ./bin/elf-arch
      - ./bin/elf-alpine
      - ./bin/elf-ubuntu
    reports:
      dotenv: build.env

package-ubuntu:
  stage: package
  parallel:
    matrix:
      - DISTRO: [focal, jammy]
  before_script:
    - apt update && apt -y upgrade
    - apt install -y git wget curl zstd debootstrap e2fsprogs proot fuse2fs xz-utils rsync
    - echo "JOB_ID_BUILD_BS_$DISTRO=$CI_JOB_ID" > build.env
  script:
    # Select elf
    - cp ./bin/elf-ubuntu ./bin/elf
    # Build
    - ./src/scripts/_build.sh debootstrap "$DISTRO"
    # Set env vars
    - echo "${DISTRO^^}_TARBALL=${DISTRO}.tar.xz" >> build.env
  needs:
    - job: build-elf
    - job: fetch-e2fsprogs
    - job: fetch-bwrap
    - job: fetch-dwarfs
    - job: fetch-bash
    - job: fetch-proot
  artifacts:
    paths:
      - ./dist
    reports:
      dotenv: build.env

package-arch:
  image: "archlinux:latest"
  stage: package
  before_script:
    - pacman -Syu --noconfirm
    - pacman -S python-pip patchelf git gawk wget curl zstd xz rsync binutils --noconfirm
    - echo JOB_ID_BUILD_BS_ARCH=$CI_JOB_ID > build.env
  script:
    # Select elf
    - cp ./bin/elf-arch ./bin/elf
    # Build
    - ./src/scripts/_build.sh archbootstrap
    # Set env vars
    - echo "ARCH_TARBALL=arch.tar.xz" >> build.env
  needs:
    - job: build-elf
    - job: fetch-e2fsprogs
    - job: fetch-bwrap
    - job: fetch-dwarfs
    - job: fetch-bash
    - job: fetch-proot
  artifacts:
    paths:
      - ./dist
    reports:
      dotenv: build.env

package-alpine:
  image: "archlinux:latest"
  stage: package
  before_script:
    - pacman -Syu --noconfirm
    - pacman -S python-pip patchelf git gawk wget curl zstd xz rsync binutils --noconfirm
    - echo JOB_ID_BUILD_BS_ALPINE=$CI_JOB_ID > build.env
  script:
    # Select elf
    - cp ./bin/elf-alpine ./bin/elf
    # Build
    - ./src/scripts/_build.sh alpinebootstrap
    # Set env vars
    - echo "ALPINE_TARBALL=alpine.tar.xz" >> build.env
  needs:
    - job: build-elf
    - job: fetch-e2fsprogs
    - job: fetch-bwrap
    - job: fetch-dwarfs
    - job: fetch-bash
    - job: fetch-proot
  artifacts:
    paths:
      - ./dist
    reports:
      dotenv: build.env

upload:
  stage: upload
  image: alpine
  before_script: |
    apk add curl
  script: |
    curl --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" --upload-file "dist/${ALPINE_TARBALL}" "${PACKAGE_REGISTRY_URL}/${ALPINE_TARBALL}"
    curl --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" --upload-file "dist/${FOCAL_TARBALL}" "${PACKAGE_REGISTRY_URL}/${FOCAL_TARBALL}"
    curl --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" --upload-file "dist/${JAMMY_TARBALL}" "${PACKAGE_REGISTRY_URL}/${JAMMY_TARBALL}"
    curl --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" --upload-file "dist/${ARCH_TARBALL}" "${PACKAGE_REGISTRY_URL}/${ARCH_TARBALL}"
  needs:
    - job: package-arch
    - job: package-ubuntu
    - job: package-alpine

deploy:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  variables:
    RELEASE_DATE: $(date "+%Y-%m-%d")
  before_script:
    - apk --no-cache add curl
  script: |
    curl --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" --request DELETE "$PROJECT_URL/releases/Continuous"
    echo "Deploy continuous"
  # Set new release
  release: # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: 'Continuous'
    description: 'Release $CI_COMMIT_SHORT_SHA : ${RELEASE_DATE}'
    assets:
      links:
        - name: 'focal.tar.xz'
          url: '${PACKAGE_REGISTRY_URL}/focal.tar.xz'
        - name: 'jammy.tar.xz'
          url: '${PACKAGE_REGISTRY_URL}/jammy.tar.xz'
        - name: 'arch.tar.xz'
          url: '${PACKAGE_REGISTRY_URL}/arch.tar.xz'
        - name: 'alpine.tar.xz'
          url: '${PACKAGE_REGISTRY_URL}/alpine.tar.xz'
  needs:
    - job: upload